#!/bin/bash -ea

target=${1-dev}
mode=${2-build} # use "upgrade" to upgrade all deps
echo "building ui modules with target=$target and mode=$mode"

echo "node: $(node --version)"
echo "yarn: $(yarn --version)"

cd "$(git rev-parse --show-toplevel)"

mkdir -p public/compiled

ts_apps1="draughts draughtsground common"
ts_apps2="ceval game chat tree nvui"
apps="site swiss chat cli challenge notify editor puzzle round analyse lobby tournament tournamentSchedule tournamentCalendar externalTournament simul dasher speech palantir"

if [ $mode == "upgrade" ]; then
  yarn upgrade --non-interactive
else
  yarn install --non-interactive
fi

build_ts() {
  echo "build_ts" "$@"
  set -ev
  cd ui/$1
  yarn run compile
}

build() {
  echo "build" "$@"
  set -ev
  cd ui/$1
  gulp $target
}


if [ $mode != "upgrade" ]; then
  echo "build css"
  (cd ui && gulp "css-$target")
  touch public/css/*.min.css # they have an off by 12h modification time!!
fi

if type -p parallel; then # parallel execution!
  if [ -z "$P_OPTS" -a ! -e ~/.parallel/config ]; then
    P_OPTS="-j+4 --halt 2"
    [ "$TRAVIS" = "true" ] || P_OPTS+=" --bar"
  fi
  set -x
  for app in $ts_apps1; do (build_ts $app); done
  parallel --gnu $P_OPTS build_ts ::: $ts_apps2
  parallel --gnu $P_OPTS build ::: $apps
else # sequential execution
  echo "For faster builds, install GNU parallel."
  for app in $ts_apps1 $ts_apps2; do (build_ts $app); done
  for app in $apps; do (build $app); done
fi
